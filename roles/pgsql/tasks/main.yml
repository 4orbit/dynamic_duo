---
- name: Build the list of the PostgreSQL defined ports
  set_fact:
    pg_ports: "{{ pg_ports |default([]) + [item.value.params.port] }}"
  with_dict: "{{ pg_clusters }}"

- name: Check the port is unique within the clusters
  assert:
    that: >
          pg_ports | count
          ==
          pg_ports | unique | count
    msg: "Duplicated port in the cluster definition. Please fix the cluster configuration variable pg_clusters in group_vars or in hosts_vars."

- name: create the database directories
  include: create_db_dir.yml
  with_dict: "{{ pg_clusters }}"
  loop_control:
    loop_var: db_cluster

- name: Create the files with the postgresql super user password
  lineinfile:
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0600
    dest: "{{ pg_home_dir }}/.pg_super_pwd_{{item.key}}"
    line: "{{ item.value.pg_super_password|default(pg_super_password) }}"
    create: yes
  with_dict: "{{ pg_clusters }}"

- name: Initialise the postgresql clusters
  command: "pg_createcluster  -u {{ pg_osuser }}  -l {{ item.value.log_directory|default(log_directory) }}/postgresql-{{item.value.version}}-{{item.key}}.log -p {{ item.value.params.port}} -d {{ item.value.data_area|default(data_area) }}/{{item.value.version}}/{{item.key}}  {{item.value.version}} {{item.key}}  -- -X {{ item.value.wal_area|default(wal_area) }}/{{item.value.version}}/{{item.key}} -U {{ item.value.pg_super_user|default(pg_super_user) }} --pwfile={{ pg_home_dir }}/.pg_super_pwd_{{item.key}} "
  args:
    creates: "{{ item.value.data_area|default(data_area) }}/{{item.value.version}}/{{item.key}}/PG_VERSION"
  with_dict: "{{ pg_clusters}}"

- name: Remove the the files with the postgresql super user password
  file:
    path: "{{ pg_home_dir }}/.pg_super_pwd_{{item.key}}"
    state: absent
  with_dict: "{{ pg_clusters}}"


- name: Ensure the conf.d directory is present in the configuration folder
  file:
    path: "/etc/postgresql/{{item.value.version}}/{{item.key}}/conf.d"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0744
  with_dict: "{{ pg_clusters}}"

- name: Ensure the conf.d path is set as include in postgresql.conf
  lineinfile:
    path: "/etc/postgresql/{{item.value.version}}/{{item.key}}/postgresql.conf"
    regexp: "^include_dir = 'conf.d'"
    line: "include_dir = 'conf.d'"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"

- name: Ship the custom postgresql.conf in conf.d
  template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{item.value.version}}/{{item.key}}/conf.d/postgresql.conf"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"

- name: Ship the  pg_hba.conf in cluster's config directory
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{item.value.version}}/{{item.key}}/pg_hba.conf"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644
  with_dict: "{{ pg_clusters}}"


- name: Start the postgresql service
  service:
    name: postgresql
    state: started
